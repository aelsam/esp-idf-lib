#define HIGH	1
#define LOW		0

#define IO_HLW8112_EN	PAout(5)

#define IO_HLW8112_CS	PAout(6)
#define IO_HLW8112_SCLK	PAout(7)

/*---------------------------------------------------------*/
union IntData
{
	u16  inte;			
	u8 byte[2];		
};
union LongData
{
    u32  word;		
    u16  inte[2];		
    u8   byte[4];		
};
/*---------------------------------------------------------*/
/*---------------------------------------------------------*/
unsigned char	B_ReadReg_Time_EN;				//串口读取寄存器数据，时间计数器标志位，1--开启计数，0--关闭计数
unsigned char	B_Tx_Finish;
unsigned char	B_Rx_Finish;
unsigned char	B_Rx_Data_ING;					//接收数据标志位	,		< 1:接收数据中,0:未接收到数据 >
unsigned char	B_Read_Error;					//UART读取出据校验和出错,< 1:数据读错，0:数据读取正确 >
unsigned char	u8_TxBuf[10]; 
unsigned char	u8_RxBuf[10];
unsigned char	u8_TX_Length;
unsigned char	u8_RX_Length;
unsigned char	u8_RX_Index;
unsigned char	u8_ReadReg_Index;
unsigned char	u8_ReadReg_Time;				//串口读取寄存器数据的时间
/*---------------------------------------------------------*/
/*---------------------------------------------------------*/
unsigned int	U16_HFConst_RegData;   			//HFCONST寄存器值
unsigned int	U16_V_RMSUC_RegData;            //电压系数
unsigned long	U32_V_RMSU_RegData;				//U通道电压寄存器 
unsigned int	U16_A_PowerSC_RegData;          //视在功率转换系数,如果选择A通道，则是A通道视在功率转换系数。A和B通道只能二者选其一
/*---------------------A通道-------------------------------*/
unsigned int	U16_A_RMSIAC_RegData;           //A通道电流系数	
unsigned int	U16_A_PowerPAC_RegData;         //A通道功率系数	
unsigned int	U16_A_EnergyAC_RegData;         //A通道电量系数	
unsigned long	U32_A_RMSIA_RegData;			//A通道电流寄存器有效值
unsigned long	U32_A_POWERPA_RegData;			//A通道功率寄存器有效值 
unsigned long	U32_A_ENERGY_PA_RegData;		//A通道有功电能(量)寄存器有效值 
/*---------------------B通道-------------------------------*/
unsigned int	U16_B_RMSIBC_RegData;           //B通道电流系数,HLW8110硬件上没有，但寄存器存在 
unsigned int	U16_B_PowerPBC_RegData;   		//B通道功率系数,HLW8110硬件上没有，但寄存器存在 
unsigned int	U16_B_EnergyBC_RegData;   		//B通道电量系数,,HLW8110硬件上没有，但寄存器存在
unsigned long	U32_B_RMSIB_RegData;			//B通道电流寄存器有效值,HLW8110硬件上没有，但寄存器存在 
/*---------------------------------------------------------*/			
/*---------------------A通道-------------------------------*/
float  	F_A_I;									//A通道电流有效值
float   F_A_P;									//A通道有功功率有效值 
float   F_A_Energy;								//A通道有功电能(量)有效值
float   F_A_Energy_BackUp;						//A通道电量备份

/*---------------------B通道-------------------------------*/
float  	F_A_I;									//B通道电流有效值
float   F_A_P;									//B通道有功功率有效值 
float   F_A_Energy;								//B通道有功电能(量)有效值
float   F_A_Energy_BackUp;						//B通道电量备份

float   F_U;									//电压有效值	
float	F_U_LineFreq;							//线性频率，是测量的电压通道				 
float	F_Angle; 								//相角，电压通道和电流通道的相角,A通道和B通道只能选其一  
float	F_PowerFactor;							//功率因素，A通道和B通道只能选其一  
/*---------------------------------------------------------*/


/*==========================================================
 * Function : void USART2_IRQHandler(void)
 * Describe : UART2串口中断，用于接收数据
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/16
===========================================================*/
void USART2_IRQHandler(void)
{
	//接收数据
	if(USART2->SR&(1<<5))	
	{	 
		
		if (u8_RX_Index < u8_RX_Length )
		{
			u8_RxBuf[u8_RX_Index] = USART2->DR;		//数据接收中
			u8_RX_Index++;
			
			B_Rx_Data_ING = 1;			//置数据接收标志位
		}
		else
		{
			B_Rx_Finish = TRUE;			//数据接收完毕
			u8_RX_Index = 0;

		}
	}
	
	//发送数据
	
}
/*==========================================================
 * Function : void Start_Send_UartData(unsigned char len)
 * Describe : UART2串口发送数据
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/16
===========================================================*/

void Start_Send_UartData(unsigned char len)
{
	uart_write_bytes(UART_NUM_2, ux_txBuff,len);

}
/*==========================================================
 * Function : void Clear_RxBuf(void)
 * Describe : 在准备接收串口数据前，清空接收缓存器的数据
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
===========================================================*/
void Clear_RxBuf(void)
{
	unsigned char i;
	for(i = 0;i<10;i++)
	{
		u8_RxBuf[i] = 0x00;
	}
	
	B_Rx_Data_ING = 0;
	B_Rx_Finish = FALSE;
	u8_RX_Index = 0;
}
/*==========================================================
 * Function : unsigned char HLW8110_checkSum_Write(unsigned char u8_Reg_length)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
===========================================================*/
unsigned char HLW8110_checkSum_Write(unsigned char u8_Reg_length)
{
	unsigned char i;
	unsigned char Temp_u8_checksum;
	unsigned int	a;

	a = 0x0000;
	Temp_u8_checksum = 0;
	for (i = 0; i< (u8_Reg_length-1); i++)
		{
			a += u8_TxBuf[i];
		}
	
	a = ~a;
	Temp_u8_checksum = a & 0xff;

	return Temp_u8_checksum;
	
}

/*============================================================================
 * Function : unsigned char HLW8110_checkSum_Read(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=============================================================================*/
unsigned char HLW8110_checkSum_Read(unsigned char u8_Reg_length)
{
	unsigned char i;
	unsigned char Temp_u8_checksum;
	unsigned int a;

	a = 0x0000;
	Temp_u8_checksum = 0;
	for (i = 0; i< (u8_Reg_length-1); i++)
		{
			a += u8_RxBuf[i];
		}
		
	a = a + u8_TxBuf[0] + u8_TxBuf[1];
	a = ~a;
		
	Temp_u8_checksum = a & 0xff;

	return Temp_u8_checksum;
	
}
/*=====================================================
 * Function : void Uart_HLW8110_WriteREG_EN(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Uart_HLW8110_WriteREG_EN(void)
{

	u8_TX_Length = 4;
	u8_RX_Length = 0;
	
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = 0xea;
	u8_TxBuf[2] = 0xe5;
//	u8_TxBuf[3] = 0x8b;  //checksum
	u8_TxBuf[3] = HLW8110_checkSum_Write(u8_TX_Length);

	Start_Send_UartData(u8_TX_Length);
		
}
/*=====================================================
 * Function : void Uart_HLW8110_WriteREG_DIS(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Uart_HLW8110_WriteREG_DIS(void)
{
	
	u8_TX_Length = 4;
	u8_RX_Length = 0;
	
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = 0xea;
	u8_TxBuf[2] = 0xdc;
//	u8_TxBuf[3] = 0x94;  //checksum
	u8_TxBuf[3] = HLW8110_checkSum_Write(u8_TX_Length);
        


	Start_Send_UartData(u8_TX_Length);
}

/*=====================================================
 * Function : void Uart_HLW8110_Set_Channel_A(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Uart_HLW8110_Set_Channel_A(void)
{
	u8_TX_Length = 4;
	u8_RX_Length = 0;
	
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = 0xea;
	u8_TxBuf[2] = 0x5a;
//	u8_TxBuf[3] = 0x16;  //checksum
	u8_TxBuf[3] = HLW8110_checkSum_Write(u8_TX_Length);

	Start_Send_UartData(u8_TX_Length);

}


/*=====================================================
 * Function : void Uart_Read_HLW8110_Reg(unsigned char ADDR_Reg,unsigned char u8_reg_length)
 * Describe :
 * Input    : 
 * Output   : 
 * Return   : 
 * Record   : 2019/04/04
=====================================================*/
void Uart_Read_HLW8110_Reg(unsigned char ADDR_Reg,unsigned char u8_reg_length)
{
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = ADDR_Reg;
	u8_TX_Length =  2;
	u8_RX_Length = u8_reg_length + 1;	// +1 是最后有一个校验和
	
	
	Clear_RxBuf();	//清空接收缓冲区
	Start_Send_UartData(u8_TX_Length);
}
/*=====================================================
 * Function : void Uart_Write_HLW8110_Reg(unsigned char ADDR_Reg,unsigned char u8_reg_length,unsigned long u32_data)
 * Describe : 写寄存器命令，u8_reg_length：写入的寄存器数据字节长度
 * Input    : 
 * Output   : 
 * Return   : 
 * Record   : 2019/04/03
=====================================================*/
void Uart_Write_HLW8110_Reg(unsigned char ADDR_Reg,unsigned char u8_reg_length,unsigned long u32_data)
{
	unsigned char i;
	union LongData Temp_u32_a;

	
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = ADDR_Reg|0x80;

	Temp_u32_a.word = u32_data;
	for (i = 0; i< u8_reg_length; i++)
		{
			u8_TxBuf[i+2] = Temp_u32_a.byte[u8_reg_length-1-i];
		}


	u8_TX_Length = 3 + u8_reg_length ;
	u8_RX_Length = 0;
	
	u8_TxBuf[u8_TX_Length-1] = HLW8110_checkSum_Write(u8_TX_Length);


	Start_Send_UartData(u8_TX_Length);
}

/*=====================================================
 * Function : void Uart_HLW8110_Reset(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Uart_HLW8110_Reset(void)
{
	
	u8_TX_Length = 4;
	u8_RX_Length = 0;
	
	u8_TxBuf[0] = 0xa5;
	u8_TxBuf[1] = 0xea;
	u8_TxBuf[2] = 0x96;
//	u8_TxBuf[3] = 0xda;  //checksum
	
	u8_TxBuf[3] = HLW8110_checkSum_Write(u8_TX_Length);

	Start_Send_UartData(u8_TX_Length);
}

/*=====================================================
 * Function : void Uart_IO_Reset(void)
 * Describe : 复位UART口
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/12
=====================================================*/
void Uart_IO_Reset(void)
{

	Uart_Read_HLW8110_Reg(REG_SYSCON_ADDR,0x02);

	vTaskDelay(500 / portTICK_PERIOD_MS);
	Uart_Read_HLW8110_Reg(REG_SYSCON_ADDR,0x02);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	Uart_Read_HLW8110_Reg(REG_SYSCON_ADDR,0x02);
	vTaskDelay(500 / portTICK_PERIOD_MS);
}


/*=====================================================
 * Function : void Judge_CheckSum_HLW8110_Calfactor(void)
 * Describe : 验证地址0x70-0x77地址的系数和
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/03/18
=====================================================*/
unsigned char Judge_CheckSum_HLW8110_Calfactor(void)
{
	unsigned long a;
	unsigned int b;
	unsigned int c;
	unsigned char d;
 
  //读取RmsIAC、RmsIBC、RmsUC、PowerPAC、PowerPBC、PowerSC、EnergAc、EnergBc的值

	
	Uart_Read_HLW8110_Reg(REG_EMUCON2_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_A_RMSIAC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("测试寄存器的值:%x\n " ,U16_A_RMSIAC_RegData);	
	}
		
	Uart_Read_HLW8110_Reg(REG_RMS_IAC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_A_RMSIAC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("电流通道A系数:%x\n " ,U16_A_RMSIAC_RegData);
	}
	
	
	Uart_Read_HLW8110_Reg(REG_RMS_IBC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_B_RMSIBC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("电流通道B系数:%x\n " ,U16_B_RMSIBC_RegData);
	}
	
	
	Uart_Read_HLW8110_Reg(REG_RMS_UC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_V_RMSUC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("电压通道系数:%x\n " ,U16_V_RMSUC_RegData);
	}
		
	Uart_Read_HLW8110_Reg(REG_POWER_PAC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_A_PowerPAC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("电流通道A有功功率系数:%x\n " ,U16_A_PowerPAC_RegData);
	}
		
	Uart_Read_HLW8110_Reg(REG_POWER_PBC_ADDR,2);
	dvTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_B_PowerPBC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("电流通道B有功功率系数:%x\n " ,U16_B_PowerPBC_RegData);
	}
	
	Uart_Read_HLW8110_Reg(REG_POWER_SC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_A_PowerSC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("视在功率系数:%x\n " ,U16_A_PowerSC_RegData);
	}
	
	Uart_Read_HLW8110_Reg(REG_ENERGY_AC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_A_EnergyAC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("A通道能量转换系数:%x\n " ,U16_A_EnergyAC_RegData);
	
	}
	Uart_Read_HLW8110_Reg(REG_ENERGY_BC_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_B_EnergyBC_RegData = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("B通道能量转换系数:%x\n " ,U16_B_EnergyBC_RegData);
	}
	
 
	Uart_Read_HLW8110_Reg(REG_CHECKSUM_ADDR,2);
	vTaskDelay(500 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		b = (u8_RxBuf[0]<<8) + u8_RxBuf[1] ;
		printf("系数校验和:%x\n " ,b);
	}
	a = 0;
  
	a = ~(a + 0xffff+U16_A_RMSIAC_RegData + U16_B_RMSIBC_RegData + U16_V_RMSUC_RegData + 
        U16_A_PowerPAC_RegData + U16_B_PowerPBC_RegData + U16_A_PowerSC_RegData + 
          U16_A_EnergyAC_RegData + U16_B_EnergyBC_RegData  );
  
	c = a & 0xffff;
	
	printf("计算系数校验和:%x\n " ,c);
  
	if ( c == b)
	{
		d = 1;
		printf("校验和正确\r\n ");
    
	}
	else
	{
		d = 0;
		printf("校验和出错\r\n ");
	}
  
	return d;
  
}

/*=====================================================
 * Function : void Init_HLW8110(void)
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Init_HLW8110(void)
{
  //uart set
  

	
	
	//STM32 IO init
	RCC->APB2ENR|=1<<2;    //使能PORTA时钟	   	 
//	RCC->APB2ENR|=5<<6;    //使能PORTD时钟	
	   	 
	GPIOA->CRL&=0X000FFFFF;  //IO状态设置,设置PA7、PA6、PA5、PA3、PA2
	GPIOA->CRL|=0X33300000;  //IO状态设置，PA7、PA6、PA5、PA2-输出、PA3-输入	
	
	
	
//4800 bps,,1S传输4800/11bit = 436byte,8112波特率设置
//IO_HLW8112_EN = LOW;
//  IO_HLW8112_SCLK = LOW;
//  IO_HLW8112_CS = LOW;

  //9600 bps,1S传输9600/11bit = 872byte
  IO_HLW8112_EN = LOW;
  IO_HLW8112_SCLK = HIGH;
  IO_HLW8112_CS = LOW;
	
	
	
	
	B_Read_Error = 0;
	Uart_HLW8110_Reset();

	vTaskDelay(100 / portTICK_PERIOD_MS);
	Uart_IO_Reset();

	vTaskDelay(30 / portTICK_PERIOD_MS);

	Uart_IO_Reset();

	vTaskDelay(30 / portTICK_PERIOD_MS);
	
	Uart_Read_HLW8110_Reg(REG_CHIP_ID_ADDR,3);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	Uart_HLW8110_WriteREG_EN();

	vTaskDelay(50 / portTICK_PERIOD_MS);
	
//电流通道A设置命令，指定当前用于计算视在功率、功率因数、相角、瞬时有功功率、瞬时视在功率和有功功率过载的信号指示 的通道为通道A	
	Uart_HLW8110_Set_Channel_A();			

	vTaskDelay(50 / portTICK_PERIOD_MS);
	Uart_Write_HLW8110_Reg(REG_SYSCON_ADDR,2,0x0a04);	//开启A通道，关闭B通道，电压通道PGA = 1，电流通道PGA = 16

	vTaskDelay(50 / portTICK_PERIOD_MS);
	
	/*------	过零输出设置-------以下代码，如果不需要可以屏蔽 ------*/
	Uart_Write_HLW8110_Reg(REG_EMUCON_ADDR,2,0x0001);	//1，使能PFA 脉冲输出和有功电能寄存器累加；
//	Uart_Write_HLW8110_Reg(REG_EMUCON_ADDR,2,0x0018);	//正向和负向过零点均发生变化，ZXD0 = 1，ZXD1 = 1
	Uart_Write_HLW8110_Reg(REG_EMUCON2_ADDR,2,0x0465);	//0x0001是EMUCON2的默认值，waveEn = 1,zxEn = 1，A通道电量寄存器，读后不清0，EPA_CB = 1；打开功率因素检测

	vTaskDelay(50 / portTICK_PERIOD_MS);
	/*------	过零输出设置-------以上代码，如果不需要可以屏蔽 ------*/
	/*------	过压输出设置-------以下代码，如果不需要可以屏蔽 ------*/
	/*------	过压输出设置-------以上代码，如果不需要可以屏蔽 ------*/
	/*------	过流输出设置-------以下代码，如果不需要可以屏蔽 ------*/
	/*------	过流输出设置-------以上代码，如果不需要可以屏蔽 ------*/
	/*------	过载输出设置-------以下代码，如果不需要可以屏蔽 ------*/
	/*------	过载输出设置-------以上代码，如果不需要可以屏蔽 ------*/
	
	Uart_HLW8110_WriteREG_DIS();

	vTaskDelay(50 / portTICK_PERIOD_MS);
  //读取地址是0x6F至0x77的寄存器，验证系数是否正确
  Judge_CheckSum_HLW8110_Calfactor();	
}

/*=====================================================
 * Function : void Read_HLW8112_IA(void)
 * Describe : 读取A通道电流
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Read_HLW8110_IA(void)
{	
	Uart_Read_HLW8110_Reg(REG_RMSIA_ADDR,3);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U32_A_RMSIA_RegData = (u8_RxBuf[0]<<16) + (u8_RxBuf[1]<<8) + (u8_RxBuf[2]); 
		printf("A通道电流寄存器:%lx\n " ,U32_A_RMSIA_RegData);
	}
	else
	{
		printf("A通道电流寄存器读取出错\r\n");
		B_Read_Error = 1;
	}
}
/*=====================================================
 * Function : void Read_HLW8110_U(void)
 * Describe : 读取电压
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Read_HLW8110_U(void)
{
	Uart_Read_HLW8110_Reg(REG_RMSU_ADDR,3);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U32_V_RMSU_RegData = (u8_RxBuf[0]<<16) + (u8_RxBuf[1]<<8) + (u8_RxBuf[2]);
		printf("电压通道寄存器:%lx\n " ,U32_V_RMSU_RegData);
	}
	else
	{
		printf("电压通道寄存器读取出错\r\n");
		B_Read_Error = 1;
	}
}
/*=====================================================
 * Function : void Read_HLW8110_PA(void)
 * Describe : 读取A通道功率
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Read_HLW8110_PA(void)
{
	Uart_Read_HLW8110_Reg(REG_POWER_PA_ADDR,4);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U32_A_POWERPA_RegData = (u8_RxBuf[0]<<24) + (u8_RxBuf[1]<<16) + (u8_RxBuf[2]<<8) + (u8_RxBuf[3]);
		printf("A通道功率寄存器:%lx\n " ,U32_A_POWERPA_RegData);
	}
	else
	{
		printf("A通道功率寄存器读取出错\r\n");
		B_Read_Error = 1;
	}

}
/*=====================================================
 * Function : void void Read_HLW8112_EA(void)
 * Describe : 读取A通道有功电量
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/03
=====================================================*/
void Read_HLW8110_EA(void)
{
	Uart_Read_HLW8110_Reg(REG_ENERGY_PA_ADDR,3); 

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U32_A_ENERGY_PA_RegData = (u8_RxBuf[0]<<16) + (u8_RxBuf[1]<<8) + (u8_RxBuf[2]);
		printf("A通道有功电量寄存器:%lx\n " ,U32_A_ENERGY_PA_RegData);
	}
	else
	{
		printf("A通道有功电量寄存器读取出错\r\n");
		B_Read_Error = 1;
	}
	
	Uart_Read_HLW8110_Reg(REG_HFCONST_ADDR,2); 

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		U16_HFConst_RegData = (u8_RxBuf[0]<<8) + (u8_RxBuf[1]);
		printf("HFCONST常数 = :%d\n " ,U16_HFConst_RegData);
	}
	else
	{
		printf("HFCONST常数寄存器读取出错\r\n");
		B_Read_Error = 1;
	}
	
		
}

/*=====================================================
 * Function : void Read_HLW8110_LineFreq(void)
 * Describe : 读取A通道的线性频率
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/12
=====================================================*/
void Read_HLW8110_LineFreq(void)
{
	float a;
	unsigned long b;
	Uart_Read_HLW8110_Reg(REG_UFREQ_ADDR,2);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		b = (u8_RxBuf[0]<<8) + (u8_RxBuf[1]);
		printf("A通道线性频率寄存器:%ld\n " ,b);
	}
	else
	{
		printf("A通道线性频率寄存器读取出错\r\n");
		B_Read_Error = 1;
	}
	a = (float)b;
	a = 3579545/(8*a);    
	F_U_LineFreq = a;
}

/*=====================================================
 * Function : void Read_HLW8110_PF(void)
 * Describe : 读取功率因素
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/03/18
=====================================================*/
void Read_HLW8110_PF(void)
{
  float a;
  unsigned long b;
	
//测量A通道的功率因素，需要发送EA+5A命令
//测量B通道的功率因素，需要发送EA+A5命令	
	
	Uart_Read_HLW8110_Reg(REG_PF_ADDR,3);

	vTaskDelay(50 / portTICK_PERIOD_MS);
	if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		b = (u8_RxBuf[0]<<16) + (u8_RxBuf[1]<<8) + (u8_RxBuf[2]);
		printf("A通道功率因素寄存器:%ld\n " ,b);
	}
	else
	{
		printf("读取A通道功率因素寄存器出错\r\n");
		B_Read_Error = 1;
	}

  if (b>0x800000)       //为负，容性负载
  {
      a = (float)(0xffffff-b + 1)/0x7fffff;
  }
  else
  {
      a = (float)b/0x7fffff;
  }
  

//功率因素*100，最大为100，最小负100
  F_PowerFactor = a;
  
}


/*=====================================================
 * Function : void Read_HLW8110_Angle(void)
 * Describe : 读取相位角
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2019/04/12
=====================================================*/
void Read_HLW8110_Angle(void)
{
	float a;	
	unsigned long b;
	Uart_Read_HLW8110_Reg(REG_ANGLE_ADDR,2);

	vTaskDelay(50 / portTICK_PERIOD_MS);
    if ( u8_RxBuf[u8_RX_Length-1] == HLW8110_checkSum_Read(u8_RX_Length) )
	{
		b = (u8_RxBuf[0]<<8) + (u8_RxBuf[1]);
		printf("A通道线相角寄存器:%ld\n " ,b);
	}
	else
	{
		printf("A通道线相角寄存器出错\r\n");
		B_Read_Error = 1;
	}
	
	if ( F_U_LineFreq < 55)	//线性频率50HZ
	{
		a = b;
		a = a * 0.0805;
		F_Angle = a;
	}
	else
	{
		//线性频率60HZ
		a = b;
		a = a * 0.0965;
		F_Angle = a;
	}
	
  
}

/*=====================================================
 * Function : void Calculate_HLW8110_MeterData(void);
 * Describe : 
 * Input    : none
 * Output   : none
 * Return   : none
 * Record   : 2018/05/10
=====================================================*/
void Calculate_HLW8110_MeterData(void)
{
	float a;
	float b;
	float c;
	float d;
	
// test code :发送错误的命令数据	
//	Uart_Read_HLW8110_Reg(0x99,3);
//	Uart_Write_HLW8110_Reg(0x99,2,0x0a04);
//	delay_ms(50);
	
	
	if (B_Read_Error == 1)
	{
	
		Clear_RxBuf();

		vTaskDelay(500 / portTICK_PERIOD_MS);

		Uart_IO_Reset();
		vTaskDelay(500 / portTICK_PERIOD_MS);
		Uart_IO_Reset();
		vTaskDelay(500 / portTICK_PERIOD_MS);
		vTaskDelay(500 / portTICK_PERIOD_MS);
		B_Read_Error = 0;
		Clear_RxBuf();
	}
	
	Read_HLW8110_IA();
	Read_HLW8110_U();
	Read_HLW8110_PA();
	Read_HLW8110_EA();
	
	Read_HLW8110_LineFreq();
	Read_HLW8110_Angle();
	Read_HLW8110_PF();
	
	//A通道电流PGA = 16,电压通道PGA = 1;电流采样电阻1mR,电压采样电阻1M
	//F_A_I = U16_A_RMSIAC_RegData*U32_A_RMSIA_RegData/(2^23);
	a = (float)U16_A_RMSIAC_RegData;
	a = a*U32_A_RMSIA_RegData;
	a = a/0x800000;		//	0x800000 = 2^23
	F_A_I = a/1000;		//转换成整数5003,表示电流5003mA=5.003A
	
	//电压
	//F_U = U16_V_RMSUC_RegData*U32_V_RMSU_RegData/(2^22);
	b = (float)U16_V_RMSUC_RegData;
	b = b*U32_V_RMSU_RegData;
	b = b/0x400000;		// 0x400000 = ^22
	F_U = b/100;		//比如计算出是22019，表增22019mV = 220.19V
	
	


	//功率需要分正功和负功
	//F_A_P = U16_A_PowerPAC_RegData*U32_A_POWERPA_RegData*1000/(2^31);
	//负功
	//	F_A_P = U16_A_PowerPAC_RegData*(~U32_A_POWERPA_RegData + 1)*1000/(2^31);
	if (U32_A_POWERPA_RegData > 0x80000000)
	{
		c = (float)(~U32_A_POWERPA_RegData);

	}
	else
	{
		c =  (float)U32_A_POWERPA_RegData;
	}
     
    c = c*U16_A_PowerPAC_RegData;
    c = c/0x80000000;  			//假设计算功率 = 235.427，那么功率 = 235.427W           
    F_A_P = c;					
	
	
	//电量计算
	//F_A_Energy = U16_A_EnergyAC_RegData*U32_A_ENERGY_PA_RegData*HFCONST*1000/（(2^29)*4096）;
	d =  (float)U32_A_ENERGY_PA_RegData;	
	d = d*U16_A_EnergyAC_RegData;
	d = d/0x20000000;             //比如算出来是2.002,表示2.002KWH,当HFCONST = 4096时，刚好和分母4096抵消			
	F_A_Energy = d;
	
	
	printf("F_A_I = %f\n " ,F_A_I);						//电流
	printf("F_U = %f\n " ,F_U);							//电压
	printf("F_A_P = %f\n " ,F_A_P);						//功率
	printf("F_A_Energy = %f\n " ,F_A_Energy);			//电量
	printf("F_U_LineFreq = %f\n " ,F_U_LineFreq);		//市电线性频率	
	printf("F_Angle = %f\n " ,F_Angle);					//L和N的相角
	printf("F_PowerFactor = %f\n " ,F_PowerFactor);		//功率因素
	
	printf("\r\n\r\n");//插入换行
		
}